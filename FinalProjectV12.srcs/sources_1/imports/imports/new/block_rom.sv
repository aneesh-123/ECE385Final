module block_rom(
        input logic [7:0] addr,
        input logic [7:0] rot_addr,
        output logic [31:0] data,
        output logic [31:0] rot1,
        output logic [31:0] rot2,
        output logic [31:0] rot3,
        output logic [31:0] rot4
    );


parameter [0:35][31:0] ROM = {

    //INITIAL REGISTERS
    //(I block)
    32'b00000100000011100001100000100010, //Reg1=4, Reg2=14, Reg3=24, Reg4=32
    //(O block)
    32'b00000100000001010000111000001111, //Reg1=4, Reg2=5, Reg3=14, Reg4=15
    //(S block)
    32'b00000100000001010000110100001110, //Reg1=4, Reg2=5, Reg3=13, Reg4=14
    //(Z block)
    32'b00000011000001000000111000001111, //Reg1=3, Reg2=4, Reg3=14, Reg4=15
    //(L block)
    32'b00000100000011100001100000011001, //Reg1=4, Reg2=14, Reg3=24, Reg4=25
    //(J block)
    32'b00000100000011100001100000010111, //Reg1=4, Reg2=14, Reg3=24, Reg4=23
    //(T block)
    32'b00000011000001000000010100001110, //Reg1=3, Reg2=4, Reg3=5, Reg4=14


    //(I block) (31:24 = reg1 offset, 23:16 = reg2 offset, 15:8 = reg3, 7:0 = reg4)
    32'b00010110000010110000000011110101, // (initial to 90) 22, 11, 0, -11
    32'b11101010111101010000000000001011, // (90 to 180) -22, -11, 0, 11
    32'b00010110000010110000000011110101, // (180 to 270) 22, 11, 0, -11
    32'b11101010111101010000000000001011, // (270 to initial) -22, -11, 0, 11

    //(O block)
    32'b00000000000000000000000000000000,
    32'b00000000000000000000000000000000,
    32'b00000000000000000000000000000000,
    32'b00000000000000000000000000000000,

    //(S block)
    32'b00000000111101001111010100000001, // 0, -12, -11, 1
    32'b00000000000011000000101111111111, // 0, 12, 11, -1
    32'b00000000111101001111010100000001, // 0, -12, -11, 1
    32'b00000000000011000000101111111111, // 0, 12, 11, -1

    //(Z block)
    32'b00000001000010101111111100001000, // 1, 10, -1, 8
    32'b11111111111101100000000111111000, // -1, -10, 1, -8
    32'b00000001000010101111111100001000, // 1, 10, -1, 8
    32'b11111111111101100000000111111000, // -1, -10, 1, -8

    //(L block)
    //32'b00001011 00000000  // 11, 0, -9, -2
    //32'b________________________________ // -12, 0, -9, 1
    //32'b________________________________ // 2, 0, 11, -11
    //32'b________________________________ // -1, 0, 9, 12
    32'b00000001000010101111111100001000, // 1, 10, -1, 8
    32'b11111111111101100000000111111000, // -1, -10, 1, -8
    32'b00000001000010101111111100001000, // 1, 10, -1, 8
    32'b11111111111101100000000111111000, // -1, -10, 1, -8

    //(J block)
    //32'b________________________________ // 11, 0, -11, -20
    //32'b________________________________ // 2, 0, -9, 9
    //32'b________________________________ // 8, 0, 11, 1
    //32'b________________________________ // -9, 0, 9, -2
    32'b00000001000010101111111100001000, // 1, 10, -1, 8
    32'b11111111111101100000000111111000, // -1, -10, 1, -8
    32'b00000001000010101111111100001000, // 1, 10, -1, 8
    32'b11111111111101100000000111111000, // -1, -10, 1, -8

    //(T block)
    //32'b________________________________ // 0, -9, 0, 0
    //32'b________________________________ // 2, 0, 0, -9
    //32'b________________________________ // -11, 0, 11, 11
    //32'b________________________________ // 9, 0, 0, 0
    32'b00000001000010101111111100001000, // 1, 10, -1, 8
    32'b11111111111101100000000111111000, // -1, -10, 1, -8
    32'b00000001000010101111111100001000, // 1, 10, -1, 8
    32'b11111111111101100000000111111000 // -1, -10, 1, -8
};

assign data = ROM[addr];
assign rot1 = ROM[rot_addr];
assign rot2 = ROM[rot_addr + 1];
assign rot3 = ROM[rot_addr + 2];
assign rot4 = ROM[rot_addr + 3];
endmodule